package Parser;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileReader;
import Ast.*;
import Scanner.*;


action code {:
	//Hashtable table = new Hashtable();
:};
/*Errores que se encontraran*/
parser code 
{:
    public AstNode raiz = null; //Crea el nodo raiz en nulo.
    public String produc = ""; //Crea el string de las producciones a concatenar.
	/* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la linea "+ (s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+ (s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};

/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  
   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */
   
   terminal Symbol INT, ADD, SUBT, DIV, MULT, ASSIGN, IF, ELSE, WHILE, FOR, VOID
    , RETURN, POT, ROOT, MINOR, MINEQ, MAYOR, MAYEQ, EQ, NEQ, OPENBRACKET, PUNTUACTION, CLOSEBRACKET, OPENBRACKETLL, OPENBRACKETCOR
    , CLOSEBRACKETLL, CLOSEBRACKETCOR, COMA;
   terminal String NUM;
   terminal String ID;
   /* No terminales usados en la seccion gramatical. 

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */

   non terminal AstNode	program,declaration_list,declaration,var_declaration,fun_declaration,
   						params,param_list,param,compound_stmt,local_declarations,statement_list,
   						statement,expression_stmt,selection_stmt,iteration_stmt,while_stmt,
   						for_stmt,return_stmt,expression,var,simple_expression,
   						additive_expression,term,factor,exp,call,args,arg_list;
   non terminal Integer relop,addop,mulop,powop,type_specifier;
   nonterminal empty; 
   //Precedencias lo mas importante es la multiplicacion y asi hasta el caso de else e if.
   //Se utiliza la precedencia por la izq mas info en el informe.
   
   precedence nonassoc MAYOR, MINEQ, MINOR, MAYEQ, EQ, NEQ;
   precedence left ELSE,IF;
   precedence left ADD, SUBT;
   precedence left ASSIGN;
   precedence left MULT, DIV;
   precedence left POT, ROOT;


   start with program;
   program::= declaration_list:dl{: 
   		this.parser.raiz = new AstProgram(dl);
   		this.parser.produc += "PROGRAM::= DECLARATION_LIST\n";
   		RESULT = this.parser.raiz;
    :};


   declaration_list::= declaration_list:dl declaration:d{:
   		this.parser.produc += "DECLARATION_LIST::= DECLARATION_LIST DECLARATION\n";
   		RESULT = d;
   		d.setHermano(dl);
   :}
    | declaration:d{:
    	this.parser.produc += "DECLARATION_LIST::= DECLARATION\n";
   		RESULT = d;
    :};

   
   declaration::= var_declaration:vd{:
   		this.parser.produc += "DECLARATION::= VAR_DECLARATION\n";
   		RESULT = vd;
   :}
   | fun_declaration:fd{:
   		this.parser.produc += "DECLARATION::= FUN_DECLARATION\n";
   		RESULT = fd;
   :};


   var_declaration::= type_specifier:ts ID:id PUNTUACTION:pc{:
   		this.parser.produc += "VAR_DECLARATION::= TYPE_SPECIFIER ID PUNTUACTION\n";
   		RESULT = new AstVarDec(ts,id,false,null); //Identifica que no llega un corchete.
   :}
   | type_specifier:ts ID:id OPENBRACKETCOR:bl NUM:num CLOSEBRACKETCOR:br PUNTUACTION:pc{:
   		this.parser.produc += "VAR_DECLARATION::= TYPE_SPECIFIER ID OPENBRACKETCOR NUM CLOSEBRACKETCOR PUNTUACTION\n";
   		RESULT = new AstVarDec(ts,id,true,num);
   :};
   

   type_specifier::= INT{:
   		this.parser.produc += "TYPE_SPECIFIER::= INT\n";
   		RESULT = sym.INT;
   :}
   | VOID{:
   		this.parser.produc += "TYPE_SPECIFIER::= VOID\n";
   		RESULT = sym.VOID;
   :};
   

   fun_declaration::= type_specifier:ts ID:id OPENBRACKET:pl params:pa CLOSEBRACKET:pr compound_stmt:cs{:
   		this.parser.produc += "FUN_DECLARATION::= TYPE_SPECIFIER ID OPENBRACKET PARAMS CLOSEBRACKET COMPOUND_STMT\n";
   		RESULT = new AstFunDec(ts,id,pa,cs);
   :};
   

   params::= param_list:pl{:
   		this.parser.produc += "PARAMS::= PARAM_LIST\n";
   		RESULT = pl;
   :}
   | VOID:v{:
   		this.parser.produc += "PARAMS::= VOID\n";
   		RESULT = new AstParamDec(sym.VOID,null,false);
   :};
   

   param_list::= param_list:pl COMA:c param:p{:
   		this.parser.produc += "PARAM_LIST::= PARAM_LIST COMA PARAM\n";
   		RESULT = p;
   		p.setHermano(pl);
   :}
   | param:p{:
   		this.parser.produc += "PARAM_LIST::= PARAM\n";
   		RESULT = p;
   :};
   

   param::= type_specifier:ts ID:id{:
   		this.parser.produc += "PARAM::= TYPE_SPECIFIER ID\n";
   		RESULT = new AstParamDec(ts,id,false);
   :}
   | type_specifier:ts ID:id OPENBRACKETCOR:bl CLOSEBRACKETCOR:br{:
   		this.parser.produc += "PARAM::= TYPE_SPECIFIER ID OPENBRACKETCOR CLOSEBRACKETCOR\n";
   		RESULT = new AstParamDec(ts,id,true);
   :};
   

   compound_stmt::= OPENBRACKETLL local_declarations:ld statement_list:sl CLOSEBRACKETLL{:
   		this.parser.produc += "COMPOUND_STMT::= OPENBRACKETLL LOCAL_DECLARATIONS STATEMENT_LIST CLOSEBRACKETLL\n";
   		RESULT = new AstCompStmt(ld,sl);
   :};
   

   local_declarations::= local_declarations:ld var_declaration:vd{:
   		this.parser.produc += "LOCAL_DECLARATIONS::= LOCAL_DECLARATIONS VAR_DECLARATION\n";
   		RESULT = vd;
   		vd.setHermano(ld);
   :}
   | empty  {:
   		this.parser.produc += "LOCAL_DECLARATIONS::= EMPTY\n";
   		RESULT = null; //Ya que en la terminal esta Empty.
   :};
   

   statement_list::= statement_list:sl statement:s{:
   		this.parser.produc += "STATEMENT_LIST::= STATEMENT_LIST STATEMENT\n";
   		RESULT = s;
   		s.setHermano(sl);
   :}
   | empty  {:
   		this.parser.produc += "STATEMENT_LIST::= EMPTY\n";
   		RESULT = null; //Ya que en la terminal esta Empty.
   :};
   

   statement::= expression_stmt:es{:
   		this.parser.produc += "STATEMENT::= EXPRESSION_STMT\n";
   		RESULT = es;
   
   :}
   | compound_stmt:cs{:
   		this.parser.produc += "STATEMENT::= COMPOUND_STMT\n";
   		RESULT = cs;
   :}
   | selection_stmt:ss{:
   		this.parser.produc += "STATEMENT::= SELECTION_STMT\n";
   		RESULT = ss;
   :}
   | iteration_stmt:is{:
   		this.parser.produc += "STATEMENT::= ITERATION_STMT\n";
   		RESULT = is;
   :}
   | return_stmt:rs{:
   		this.parser.produc += "STATEMENT::= RETURN_STMT\n";
   		RESULT = rs;
   :};
   

   expression_stmt::= expression:e PUNTUACTION{:
   		this.parser.produc += "EXPRESSION_STMT::= EXPRESSION PUNTUACTION\n";
   		RESULT = e;
   :}
   | PUNTUACTION{:
   		this.parser.produc += "EXPRESSION_STMT::= PUNTUACTION\n";
   		RESULT = new AstVaciaStmt();
   :};
   

   selection_stmt::= IF OPENBRACKET expression:e CLOSEBRACKET statement:s{:
   		this.parser.produc += "SELECTION_STMT::= IF OPENBRACKET EXPRESSION CLOSEBRACKET STATEMENT\n";
   		RESULT = new AstSelectStmt(e,s,null,false);
   :}
   | IF OPENBRACKET:pl expression:e CLOSEBRACKET:pr statement:s1 ELSE statement:s2{:
   		this.parser.produc += "SELECTION_STMT::= IF OPENBRACKET EXPRESSION CLOSEBRACKET STATEMENT ELSE STATEMENT\n";
   		RESULT = new AstSelectStmt(e,s1,s2,true);
   :};
   

   iteration_stmt::= while_stmt:ws{:
   		this.parser.produc += "ITERATION_STMT::= WHILE_STMT\n";
   		RESULT = ws;
   :}
   | for_stmt:fs {:
                this.parser.produc += "iteration_stmt ::= for_stmt\n"; 
                RESULT = fs; 
   :};
   

   while_stmt::= WHILE OPENBRACKET:pl expression:e CLOSEBRACKET:pr statement:s{:
   		this.parser.produc += "WHILE_STMT::= WHILE OPENBRACKET EXPRESSION OPENBRACKETC STATEMENT\n";
   		RESULT = new AstIterStmt(e,s,false);
   :};
   

   for_stmt::= FOR OPENBRACKET:pl expression:e1 COMA expression:e2 COMA expression:e3 CLOSEBRACKET:pr statement:s{:
   		this.parser.produc += "FOR_STMT::= FOR OPENBRACKET expression COMA expression COMA expression OPENBRACKETC STATEMENT\n";
   		RESULT = new AstIterStmt(e1,e2,e3,s);
   :};
   

   return_stmt::= RETURN PUNTUACTION{:
   		this.parser.produc += "RETURN_STMT::= RETURN PUNTUACTION\n";
   		RESULT = new AstReturnStmt(null);
   :}
   | RETURN expression:e PUNTUACTION{:
   		this.parser.produc += "RETURN_STMT::= RETURN EXPRESSION PUNTUACTION\n";
   		RESULT = new AstReturnStmt(e);
   :};
   

   expression::= var:v ASSIGN expression:e{:
   		this.parser.produc += "EXPRESSION::= VAR ASSIGN EXPRESSION\n";
   		RESULT = new AstExpAsign(v,e,sym.ASSIGN);
   :}
   | simple_expression:se{:
   		this.parser.produc += "EXPRESSION::= SIMPLE_EXPRESSION\n";
   		RESULT = se;
   :};
   

   var::= ID:id{:
   		this.parser.produc += "VAR::= ID\n";
   		RESULT = new AstExpVar(null,id,false);
   :}
   | ID:id OPENBRACKETCOR expression:e CLOSEBRACKETCOR{:
   		this.parser.produc += "VAR::= ID OPENBRACKETCOR EXPRESSION CLOSEBRACKETCOR\n";
   		RESULT = new AstExpVar(e,id,true);
   :};
   

   simple_expression::= additive_expression:ae1 relop:r additive_expression:ae2{:
   		this.parser.produc += "SIMPLE_EXPRESION::= ADITIVE_EXPRESION RELOP ADITIVE_EXPRESION\n";
   		RESULT = new AstExpBin(r,ae1,ae2);
   :}
   | additive_expression:ae{:
   		this.parser.produc += "SIMPLE_EXPRESION::= ADITIVE_EXPRESION\n";
   		RESULT = ae;
   :}; 
   

   relop::= MINEQ{:
   		this.parser.produc += "RELOP::= MINEQ\n";
   		RESULT = sym.MINEQ;
   :}
   | MINOR{:
   		this.parser.produc += "RELOP::= MINOR\n";
   		RESULT = sym.MINOR;
   :}
   | MAYOR{:
   		this.parser.produc += "RELOP::= MAYOR\n";
   		RESULT = sym.MAYOR;
   :}
   | MAYEQ{:
   		this.parser.produc += "RELOP::= MAYEQ\n";
   		RESULT = sym.MAYEQ;
   :}
   | EQ{:
   		this.parser.produc += "RELOP::= EQ\n";
   		RESULT = sym.EQ;
   :}
   | NEQ{:
   		this.parser.produc += "RELOP::= NEQ\n";
   		RESULT = sym.NEQ;
   :};
   

   additive_expression::= additive_expression:ae addop:a term:t{:
   		this.parser.produc += "ADDITIVE_EXPRESSION::= ADDITIVE_EXPRESSION ADDOP TERM\n";
   		RESULT = new AstExpBin(a,ae,t);
   :}
   | term:t{:
   		this.parser.produc += "ADDITIVE_EXPRESSION::= TERM\n";
   		RESULT = t;
   :};
   

   addop::= ADD{:
   		this.parser.produc += "ADDOP::= ADD\n";
   		RESULT = sym.ADD;
   :}
   | SUBT{:
   		this.parser.produc += "ADDOP::= SUBT\n";
   		RESULT = sym.SUBT;
   :};
   

   term::= term:t mulop:m factor:f{:
   		this.parser.produc += "TERM::= TERM MULOP FACTOR\n";
   		RESULT = new AstExpBin(m,t,f);
   :}
   | factor:f{:
   		this.parser.produc += "TERM::= FACTOR\n";
   		RESULT = f;
   :};
   

   mulop::= MULT{:
   		this.parser.produc += "MULOP::= MULT\n";
   		RESULT = sym.MULT;
   :}
   | DIV{:
   		this.parser.produc += "MULOP::= DIV\n";
   		RESULT = sym.DIV;
   :};
   

   factor::= factor:f powop:p exp:ex{:
   		this.parser.produc += "FACTOR::= FACTOR POWOP EXP\n";
   		RESULT = ex;
   :}
   | exp:ex{:
   		this.parser.produc += "FACTOR::= EXP\n";
   		RESULT = ex;
   :};
   

   powop::= POT{:
   		this.parser.produc += "POWOP::= POT\n";
   		RESULT = sym.POT;
   :}
   | ROOT{:
   		this.parser.produc += "POWOP::= ROOT\n";
   		RESULT = sym.ROOT;
   :};
   

   exp::= OPENBRACKET:pl expression:e CLOSEBRACKET:pr{:
   		this.parser.produc += "EXP::= OPENBRACKET EXPRESSION CLOSEBRACKET\n";
   		RESULT = e;
   :}
   | var:v{:
   		this.parser.produc += "EXP::= VAR\n";
   		RESULT = v;
   :}
   | call:c{:
   		this.parser.produc += "EXP::= CALL\n";
   		RESULT = c;
   :}
   | NUM:n{:
   		this.parser.produc += "EXP::= NUM\n";
   		RESULT = new AstExpConst(n);
   :};
   

   call::= ID:id OPENBRACKET:pl args:a CLOSEBRACKET:pr{:
   		this.parser.produc += "CALL::= ID OPENBRACKET ARGS CLOSEBRACKET\n";
   		RESULT = new AstExpFun(id,a);
   :}; 
   

   args::= arg_list:al{:
   		this.parser.produc += "ARGS::= ARG_LIST\n";
   		RESULT = al;
   :}
   | empty {:
   		this.parser.produc += "ARGS::= EMPTY\n";
   		RESULT = null;
   :};
   

   arg_list::= arg_list:al COMA expression:e{:
   		this.parser.produc += "ARG_LIST::= ARG_LIST COMA EXPRESSION\n";
   		RESULT = e;
   		e.setHermano(al);
   :}
   | expression:e{:
   		this.parser.produc += "ARG_LIST::= EXPRESSION\n";
   		RESULT = e;
   :};
   

   empty ::= ;
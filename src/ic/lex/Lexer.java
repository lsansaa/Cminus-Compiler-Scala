/* The following code was generated by JFlex 1.4.1 on 07-12-16 2:21 */

package ic.lex	;
import ic.error.LexicalError;
import java_cup.runtime.*;
import Parser.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 07-12-16 2:21 from the specification file
 * <tt>src/ic/lex/ic.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  4,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 28,  0, 39,  0, 40,  0,  0, 18, 21, 14, 13, 25, 15,  0, 16, 
     2, 58, 58, 58, 58, 58, 58, 58, 58, 58, 11, 24, 26, 12, 27,  0, 
     0,  1,  1,  1, 35, 31, 30, 10, 38,  8,  1,  1, 32,  1,  9, 34, 
     1,  1,  7,  5,  6, 36, 33, 37,  1,  1,  1, 19,  0, 23, 17, 57, 
     0, 41, 41, 41, 53, 49, 48, 47, 56, 45, 41, 41, 50, 41, 46, 52, 
    41, 41, 44, 42, 43, 54, 51, 55, 41, 41, 41, 20, 29, 22,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\5\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\6\2\1\23\10\24\1\3"+
    "\3\0\2\25\1\0\1\26\1\27\1\0\1\30\1\31"+
    "\1\32\1\25\5\0\1\23\4\24\1\25\4\24\2\0"+
    "\1\33\1\34\3\0\1\33\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\2\24\1\33\1\35\3\24\2\0\1\23"+
    "\1\36\1\37\1\0\1\37\1\36\2\24\1\36\1\37"+
    "\1\24\2\0\2\40\2\24\1\40\1\41\1\42\1\41"+
    "\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\73\0\166\0\261\0\354\0\u0127\0\u0162"+
    "\0\u019d\0\73\0\u01d8\0\73\0\u0213\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\u024e\0\u0289"+
    "\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461"+
    "\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u06ea\0\73\0\u0725\0\73\0\73"+
    "\0\u0760\0\73\0\73\0\73\0\u079b\0\u07d6\0\u0811\0\u084c"+
    "\0\u0887\0\u08c2\0\73\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u0461"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\73\0\73"+
    "\0\u0b4b\0\u0b86\0\u0bc1\0\u0b10\0\73\0\u0bfc\0\u0c37\0\u0c72"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0461\0\u0461\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0760\0\73\0\u0e85\0\u0e85\0\73"+
    "\0\u0ec0\0\u0efb\0\u0f36\0\u0461\0\u0461\0\u0f71\0\u0fac\0\u0fe7"+
    "\0\73\0\u0fe7\0\u1022\0\u105d\0\u0461\0\73\0\73\0\u0461"+
    "\0\u0461";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\2\4\1\5\1\2\1\6\1\7\2\2"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\2\1\35\3\2"+
    "\1\36\2\2\1\37\1\40\1\41\1\40\1\42\1\43"+
    "\2\40\1\44\1\45\1\40\1\46\3\40\1\47\1\40"+
    "\1\2\1\50\76\0\2\4\74\0\1\51\44\0\1\51"+
    "\54\0\1\52\1\0\1\52\21\0\1\52\22\0\1\53"+
    "\23\0\1\54\1\55\17\0\1\53\1\0\1\55\25\0"+
    "\1\56\73\0\1\57\74\0\1\60\123\0\1\61\37\0"+
    "\1\62\72\0\1\63\72\0\1\64\67\0\1\53\23\0"+
    "\1\65\1\55\1\52\1\66\1\0\1\67\3\0\1\70"+
    "\7\0\1\53\1\0\1\55\1\52\1\66\1\0\1\67"+
    "\3\0\1\70\37\0\1\71\4\0\1\71\21\0\1\71"+
    "\43\0\1\66\2\0\1\66\21\0\1\66\45\0\1\72"+
    "\4\0\1\72\21\0\1\72\43\0\1\70\10\0\1\70"+
    "\21\0\1\70\2\0\4\37\1\73\66\37\1\0\2\40"+
    "\2\0\6\40\23\0\11\40\2\0\20\40\1\74\1\40"+
    "\1\0\2\40\2\0\1\40\1\75\4\40\23\0\11\40"+
    "\2\0\2\40\1\75\15\40\1\74\1\40\1\0\2\40"+
    "\2\0\6\40\22\0\1\52\1\40\1\76\7\40\2\0"+
    "\10\40\1\76\7\40\1\74\1\40\1\0\2\40\2\0"+
    "\4\40\1\77\1\40\22\0\1\54\1\100\10\40\2\0"+
    "\5\40\1\77\1\40\1\100\10\40\1\74\1\40\1\0"+
    "\2\40\2\0\6\40\22\0\1\71\4\40\1\101\4\40"+
    "\2\0\13\40\1\101\4\40\1\74\1\40\1\0\2\40"+
    "\2\0\6\40\22\0\1\66\2\40\1\102\6\40\2\0"+
    "\11\40\1\102\6\40\1\74\1\40\1\0\2\40\2\0"+
    "\6\40\22\0\1\72\4\40\1\103\4\40\2\0\13\40"+
    "\1\103\4\40\1\74\1\40\1\0\2\40\2\0\6\40"+
    "\22\0\1\70\10\40\1\104\2\0\17\40\1\104\1\74"+
    "\1\40\2\0\1\50\67\0\1\50\7\0\1\105\44\0"+
    "\1\105\24\0\1\106\26\0\1\106\15\0\1\106\25\0"+
    "\1\107\26\0\1\107\15\0\1\107\33\0\1\110\56\0"+
    "\16\61\1\111\30\61\1\112\23\61\5\0\1\113\1\114"+
    "\1\115\1\116\24\0\1\117\14\0\1\113\1\114\1\115"+
    "\1\116\22\0\1\113\27\0\1\113\14\0\1\113\27\0"+
    "\1\115\1\120\24\0\1\121\16\0\1\115\1\120\25\0"+
    "\1\122\24\0\1\122\17\0\1\122\24\0\1\115\25\0"+
    "\1\115\16\0\1\115\26\0\1\120\24\0\1\120\17\0"+
    "\1\120\16\0\2\74\2\0\6\74\23\0\11\74\2\0"+
    "\20\74\1\0\1\74\1\0\2\40\2\0\2\40\1\123"+
    "\3\40\23\0\11\40\2\0\3\40\1\123\14\40\1\74"+
    "\1\40\1\0\2\40\2\0\1\40\1\124\4\40\22\0"+
    "\1\106\11\40\2\0\2\40\1\124\15\40\1\74\1\40"+
    "\1\0\2\40\2\0\1\40\1\125\4\40\22\0\1\107"+
    "\11\40\2\0\2\40\1\125\15\40\1\74\1\40\1\0"+
    "\2\40\2\0\2\40\1\126\3\40\22\0\1\115\11\40"+
    "\2\0\3\40\1\126\14\40\1\74\1\40\1\0\2\40"+
    "\2\0\1\127\5\40\22\0\1\113\11\40\2\0\1\40"+
    "\1\127\16\40\1\74\1\40\1\0\2\40\2\0\3\40"+
    "\1\130\2\40\22\0\1\120\11\40\2\0\4\40\1\130"+
    "\13\40\1\74\1\40\1\0\2\40\2\0\3\40\1\131"+
    "\2\40\22\0\1\122\11\40\2\0\4\40\1\131\13\40"+
    "\1\74\1\40\10\0\1\132\44\0\1\132\52\0\1\133"+
    "\6\0\1\133\21\0\1\133\4\0\16\61\1\111\1\61"+
    "\1\0\70\61\1\111\1\61\1\134\26\61\1\112\23\61"+
    "\35\0\1\135\1\0\1\135\21\0\1\135\46\0\1\136"+
    "\2\0\1\137\2\0\1\140\16\0\1\137\2\0\1\140"+
    "\42\0\1\141\1\0\1\135\1\137\2\0\1\140\1\133"+
    "\14\0\1\135\1\137\2\0\1\140\1\133\41\0\1\140"+
    "\5\0\1\140\21\0\1\140\42\0\1\137\2\0\1\137"+
    "\21\0\1\137\11\0\2\40\2\0\3\40\1\142\2\40"+
    "\23\0\11\40\2\0\4\40\1\142\13\40\1\74\1\40"+
    "\1\0\2\40\2\0\6\40\22\0\1\133\6\40\1\143"+
    "\2\40\2\0\15\40\1\143\2\40\1\74\1\40\1\0"+
    "\2\40\2\0\6\40\22\0\1\135\1\40\1\144\7\40"+
    "\2\0\10\40\1\144\7\40\1\74\1\40\1\0\2\40"+
    "\2\0\6\40\22\0\1\140\5\40\1\145\3\40\2\0"+
    "\14\40\1\145\3\40\1\74\1\40\1\0\2\40\2\0"+
    "\6\40\22\0\1\137\2\40\1\146\6\40\2\0\11\40"+
    "\1\146\6\40\1\74\1\40\11\0\1\147\44\0\1\147"+
    "\23\0\1\150\25\0\1\150\16\0\1\150\53\0\1\151"+
    "\1\0\1\151\21\0\1\151\20\0\1\150\25\0\1\152"+
    "\1\0\1\151\14\0\1\150\4\0\1\151\12\0\2\40"+
    "\2\0\4\40\1\153\1\40\23\0\11\40\2\0\5\40"+
    "\1\153\12\40\1\74\1\40\1\0\2\40\2\0\2\40"+
    "\1\154\3\40\22\0\1\150\11\40\2\0\3\40\1\154"+
    "\14\40\1\74\1\40\1\0\2\40\2\0\6\40\22\0"+
    "\1\151\1\40\1\155\7\40\2\0\10\40\1\155\7\40"+
    "\1\74\1\40\12\0\1\156\44\0\1\156\24\0\1\157"+
    "\23\0\1\157\20\0\1\157\15\0\2\40\2\0\5\40"+
    "\1\160\23\0\11\40\2\0\6\40\1\160\11\40\1\74"+
    "\1\40\1\0\2\40\2\0\4\40\1\161\1\40\22\0"+
    "\1\157\11\40\2\0\5\40\1\161\12\40\1\74\1\40";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4248];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\11\6\1\1\11\1\1\1\11\1\1\11\11"+
    "\22\1\3\0\1\1\1\11\1\0\2\11\1\0\3\11"+
    "\1\1\5\0\1\11\11\1\2\0\2\11\3\0\1\1"+
    "\1\11\1\0\1\1\1\0\1\1\1\0\7\1\2\0"+
    "\1\1\1\11\1\1\1\0\1\11\6\1\2\0\1\11"+
    "\4\1\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /** for use in building string literals in the STRING state */
  StringBuffer stringLiteral = new StringBuffer();
  
  /** Create a token with the given type and the given value */
  Token create(int type, Object value) {
    return new Token(type, value, yyline+1);
  }
  
  /** Create a token with the given type and no value */
  Token create(int type) {
    return create(type, null);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return create(sym.NUM, yytext());
          }
        case 35: break;
        case 15: 
          { return create(sym.PUNTUACTION);
          }
        case 36: break;
        case 4: 
          { return create(sym.ADD);
          }
        case 37: break;
        case 28: 
          { return create(sym.ASSIGN);
          }
        case 38: break;
        case 34: 
          { return create(sym.RETURN);
          }
        case 39: break;
        case 14: 
          { return create(sym.CLOSEBRACKETCOR);
          }
        case 40: break;
        case 32: 
          { return create(sym.WHILE);
          }
        case 41: break;
        case 5: 
          { return create(sym.MULT);
          }
        case 42: break;
        case 9: 
          { return create(sym.OPENBRACKET);
          }
        case 43: break;
        case 27: 
          { return create(sym.INT);
          }
        case 44: break;
        case 12: 
          { return create(sym.CLOSEBRACKET);
          }
        case 45: break;
        case 31: 
          { return create(sym.VOID);
          }
        case 46: break;
        case 26: 
          { return create(sym.NEQ);
          }
        case 47: break;
        case 30: 
          { return create(sym.ELSE);
          }
        case 48: break;
        case 25: 
          { return create(sym.MAYEQ);
          }
        case 49: break;
        case 21: 
          { return create(sym.IF);
          }
        case 50: break;
        case 18: 
          { return create(sym.MAYOR);
          }
        case 51: break;
        case 29: 
          { return create(sym.FOR);
          }
        case 52: break;
        case 33: 
          { return create(sym.STRING);
          }
        case 53: break;
        case 20: 
          { return create(sym.ID, yytext());
          }
        case 54: break;
        case 6: 
          { return create(sym.SUBT);
          }
        case 55: break;
        case 7: 
          { return create(sym.DIV);
          }
        case 56: break;
        case 23: 
          { return create(sym.ROOT);
          }
        case 57: break;
        case 24: 
          { return create(sym.MINEQ);
          }
        case 58: break;
        case 19: 
          { return create(sym.COMMENT);
          }
        case 59: break;
        case 17: 
          { return create(sym.MINOR);
          }
        case 60: break;
        case 8: 
          { return create(sym.POT);
          }
        case 61: break;
        case 2: 
          { return create (sym.error,"LexicalError '" + yytext() + "'");
          }
        case 62: break;
        case 1: 
          { /*Ignore*/
          }
        case 63: break;
        case 11: 
          { return create(sym.OPENBRACKETLL);
          }
        case 64: break;
        case 13: 
          { return create(sym.CLOSEBRACKETLL);
          }
        case 65: break;
        case 10: 
          { return create(sym.OPENBRACKETCOR);
          }
        case 66: break;
        case 16: 
          { return create(sym.COMA);
          }
        case 67: break;
        case 22: 
          { return create(sym.EQ);
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return create(sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
